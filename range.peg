package grange

type RangeQuery Peg {
  currentLiteral string
  nodeStack []Node
}

expression <- rangeexpr combinators? !.

rangeexpr <- space
    ( q
    / function
    / subexpr
    / cluster
    / group
    / groupq
    / localkey
    / regex
    / value
    / { p.AddNull() } braces
    / null)

combinators <- space (union / intersect / exclude / braces)
intersect   <- '&' rangeexpr { p.AddOperator(operatorIntersect) }
exclude     <- '-' rangeexpr { p.AddOperator(operatorSubtract) }
union       <- ',' rangeexpr { p.AddOperator(operatorUnion) }

# See https://github.com/pointlander/peg/issues/21 for context
braces  <- '{' rangeexpr combinators? '}' rangeexpr? { p.AddBraces() }

subexpr <- '%{' rangeexpr '}' { p.AddSubexpr() } key?

groupq  <- '?' rangeexpr { p.AddGroupQuery() }

# TODO: Following two probably need to look for expr, not literal. That then
# takes care of subexpr too.
cluster <- '%' literal { p.AddClusterLookup(buffer[begin:end]) } key?
group   <- '@' literal { p.AddGroupLookup(buffer[begin:end]) }

key     <- ':' literal { p.AddKeyLookup(buffer[begin:end]) }
localkey <- '$' literal { p.AddLocalClusterLookup(buffer[begin:end]) }

function <- literal { p.AddFunction(buffer[begin:end]) } '(' funcargs ')'
funcargs <- rangeexpr { p.AddFuncArg() } ';' funcargs
          / rangeexpr { p.AddFuncArg() }

regex   <- '/' < (!'/' .)* > '/' { p.AddRegex(buffer[begin:end]) }
literal <- <[[a-z0-9-_]]+>
value   <- <[[a-z0-9-_.]]+> { p.AddValue(buffer[begin:end]) }
space   <- ' '*
q       <- 'q(' <(!')' .)*> ')' { p.AddValue(buffer[begin:end]) }
