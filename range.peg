package grange

type rangeQuery Peg {
  currentLiteral string
  nodeStack []Node
}

expression <- rangeexpr combinators? !.

rangeexpr <- space
    ( q
    / function
    / cluster
    / group
    / groupq
    / localkey
    / regex
    / value
    / { p.addBraceStart() } braces
    / null)

combinators <- space (union / intersect / exclude / braces)
intersect   <- '&' rangeexpr  { p.addOperator(operatorIntersect) } combinators?
exclude     <- '-' rangeexpr  { p.addOperator(operatorSubtract) } combinators?
union       <- ',' rangeexpr  { p.addOperator(operatorUnion) } combinators?

# See https://github.com/pointlander/peg/issues/21 for context
braces  <- '{' rangeexpr combinators? '}' rangeexpr? { p.addBraces() }

groupq  <- '?' rangeexpr { p.addGroupQuery() }
cluster <- '%' rangeexpr { p.addClusterLookup() } key?
group   <- '@' rangeexpr { p.addGroupLookup() }

# TODO: Use rangeexpr for the following?
key      <- ':' rangeexpr { p.addKeyLookup() }
localkey <- '$' literal { p.addLocalClusterLookup(buffer[begin:end]) }

function <- literal { p.addFunction(buffer[begin:end]) } '(' funcargs ')'
funcargs <- rangeexpr { p.addFuncArg() } ';' funcargs
          / rangeexpr { p.addFuncArg() }

regex   <- '/' < (!'/' .)* > '/' { p.addRegex(buffer[begin:end]) }
literal <- <[[a-z0-9-_]]+>
value   <- <[[a-z0-9-_.]]+> { p.addValue(buffer[begin:end]) }
space   <- ' '*
q       <- 'q(' <(!')' .)*> ')' { p.addConstant(buffer[begin:end]) }
